{"version":3,"file":"component---src-layouts-post-index-tsx-content-file-path-content-posts-personal-website-p-1-mdx-b09332ee411aab42dab7.js","mappings":"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","sources":["webpack://app/./src/components/templates/post/index.tsx","webpack://app/./src/providers/mdx-provider.tsx","webpack://app/./content/posts/personal-website/p1.mdx","webpack://app/./src/layouts/post/index.tsx","webpack://app/../node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["import { Container } from \"@mui/material\";\nimport React from \"react\";\n\nimport { AppDrawer, AppDrawerProps } from \"@/components/organisms/app-drawer\";\nimport { AppHeader, AppHeaderProps } from \"@/components/organisms/app-header\";\n\nexport type PostTemplateProps = React.PropsWithChildren<{\n\tappDrawerProps: AppDrawerProps;\n\tappHeaderProps: AppHeaderProps;\n}>;\n\nexport const PostTemplate = ({\n\tappDrawerProps,\n\tappHeaderProps,\n\tchildren,\n}: PostTemplateProps) => (\n\t<>\n\t\t<AppHeader {...appHeaderProps} />\n\t\t<AppDrawer {...appDrawerProps} />\n\t\t<Container maxWidth=\"md\">{children}</Container>\n\t</>\n);\n","import { MDXProvider } from \"@mdx-js/react\";\nimport Link from \"@mui/material/Link\";\nimport Typography from \"@mui/material/Typography\";\nimport * as React from \"react\";\n\nimport { AppTheme } from \"@/theme\";\n\nexport type AppMDXProviderProps = React.PropsWithChildren<object>;\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst h1 = (props: any) => <Typography gutterBottom variant=\"h3\" {...props} />;\nconst h2 = (props: any) => <Typography gutterBottom variant=\"h4\" {...props} />;\nconst h3 = (props: any) => <Typography gutterBottom variant=\"h5\" {...props} />;\nconst h4 = (props: any) => <Typography gutterBottom variant=\"h6\" {...props} />;\nconst h5 = (props: any) => <Typography gutterBottom variant=\"h7\" {...props} />;\nconst h6 = (props: any) => (\n\t<Typography gutterBottom variant=\"subtitle1\" {...props} />\n);\nconst text = (props: any) => <Typography variant=\"body1\" {...props} />;\n\nconst strong = (props: any) => (\n\t<Typography\n\t\tvariant=\"body1\"\n\t\tcss={(theme: AppTheme) => ({\n\t\t\tfontWeight: theme.typography.fontWeightBold,\n\t\t})}\n\t\t{...props}\n\t/>\n);\n\nconst p = (props: any) => (\n\t<Typography\n\t\t{...props}\n\t\tvariant=\"body1\"\n\t\tparagraph\n\t\tcss={(theme: AppTheme) => ({\n\t\t\tmarginBlockEnd: theme.spacing(1),\n\t\t})}\n\t/>\n);\n\nconst ul = (props: any) => (\n\t<ul\n\t\t{...props}\n\t\tcss={(theme: AppTheme) => ({\n\t\t\tmarginBlockStart: theme.spacing(0),\n\t\t\tmarginBlockEnd: theme.spacing(2),\n\t\t})}\n\t/>\n);\n\nconst li = (props: any) => <li {...props} css={{}} />;\n\nconst a = (props: any) => <Link {...props} />;\n\nconst defaultComponents = {\n\ttext,\n\tp,\n\th1,\n\th2,\n\th3,\n\th4,\n\th5,\n\th6,\n\tstrong,\n\tul,\n\tli,\n\ta,\n} satisfies React.ComponentProps<typeof MDXProvider>[\"components\"];\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\nexport const AppMDXProvider = ({ children }: AppMDXProviderProps) => (\n\t<MDXProvider components={defaultComponents}>{children}</MDXProvider>\n);\n","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(_components.p, null, \"In this series of posts, I'll take you through the process of how I built my own website, exploring the tools, technologies, and decisions I made along the way.\");\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/mnt/app/content/posts/personal-website/p1.mdx\";\nimport * as React from \"react\";\nimport {MyHelmet} from \"@/components/atoms/my-helmet\";\nimport {PostTemplate} from \"@/components/templates/post\";\nimport {AppMDXProvider} from \"@/providers/mdx-provider\";\nimport {useSiteMetadata} from \"@/shell/default-headers\";\nimport {useAppDrawerStore} from \"@/stores/use-app-drawer-store\";\nimport {useThemeModeStore} from \"@/stores/use-theme-mode-store\";\nimport {jsx as ___EmotionJSX} from \"@emotion/react\";\nconst PostLayout = _ref => {\n  var _data$mdx, _data$mdx$frontmatter;\n  let {children, data} = _ref;\n  const siteMetadata = useSiteMetadata(), drawer = useAppDrawerStore(), theme = useThemeModeStore();\n  return ___EmotionJSX(AppMDXProvider, null, ___EmotionJSX(MyHelmet, null, ___EmotionJSX(\"title\", null, (_data$mdx = data.mdx) === null || _data$mdx === void 0 ? void 0 : (_data$mdx$frontmatter = _data$mdx.frontmatter) === null || _data$mdx$frontmatter === void 0 ? void 0 : _data$mdx$frontmatter.title, \" | \", siteMetadata.title)), ___EmotionJSX(PostTemplate, {\n    appDrawerProps: {\n      onClose: drawer.closeDrawer,\n      open: drawer.open,\n      themeMode: theme.themeMode,\n      onThemeModeChange: (_, mode) => {\n        theme.setThemeMode(mode);\n      }\n    },\n    appHeaderProps: {\n      onOpenSettings: drawer.openDrawer,\n      themeMode: theme.themeMode,\n      onToggleThemeMode: theme.toggleThemeMode\n    }\n  }, children));\n};\nPostLayout\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostLayout, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nconst pageQuery = \"4095399130\";\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["PostTemplate","_ref","appDrawerProps","appHeaderProps","children","___EmotionJSX","React","AppHeader","AppDrawer","Container","maxWidth","name","styles","defaultComponents","text","props","Typography","_extends","variant","p","paragraph","css","theme","marginBlockEnd","spacing","h1","gutterBottom","h2","h3","h4","h5","h6","strong","fontWeight","typography","fontWeightBold","ul","marginBlockStart","li","a","Link","AppMDXProvider","_ref2","MDXProvider","components","_createMdxContent","_components","Object","assign","_provideComponents","wrapper","MDXLayout","PostLayout","_data$mdx","_data$mdx$frontmatter","data","siteMetadata","useSiteMetadata","drawer","useAppDrawerStore","useThemeModeStore","MyHelmet","mdx","frontmatter","title","onClose","closeDrawer","open","themeMode","onThemeModeChange","_","mode","setThemeMode","onOpenSettings","openDrawer","onToggleThemeMode","toggleThemeMode","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","emptyComponents","MDXContext","useMDXComponents","contextComponents","properties","allComponents","disableParentContext","Provider","value"],"sourceRoot":""}